main url = http://localhost:8000/api/


///////////////////// Start Products Routes (sub_url => products/) //////////////////////

1. Get all products
    method => get
    res => all products array

2. Delete Main Product
    method => Delete
    req param => productID => Products ID

3. Update Main Product
    method => Put
    req param => productID => Products ID
    req body => {
        title => عنوان محصول
        price => مبلغ محصول
        count => موجودی محصول
        img => آدرس کاور محصول
        popularity => میزان محبوبیت محصول
        sale => میزان فروش
        colors => تعداد رنگ بندی
    }

4. Add new Product
    method => Post
    req body => {
        title => عنوان محصول
        price => مبلغ محصول
        count => موجودی محصول
        img => آدرس کاور محصول
        popularity => میزان محبوبیت محصول
        sale => میزان فروش
        colors => تعداد رنگ بندی
    }

///////////////////// Finish Products Routes (sub_url => products/) //////////////////////



///////////////////// Start comments Routes (sub_url => comments/) //////////////////////

1. Get all comments
    method => Get
    res => all comments array

2. Delete Main Comment
    method => Delete
    req param => commentId => Comment ID

3. Update Main Comment (Body)
    method => Put
    req param => commentId => Comment ID
    req body => {
        body => محتوای جدید کامنت
    }

4. Accept Comment
    method: Post
    sub_url: /accept
    req param => commentId => Comment ID

5. Reject Comment
    method: Post
    sub_url: /reject
    req param => commentId => Comment ID

///////////////////// Finish comments Routes (sub_url => comments/) //////////////////////



///////////////////// Start Users Routes (sub_url => users/) //////////////////////

1. Get all users
    method => Get
    res => all users array

2. Delete Main User
    method => Delete
    req param => userID => User ID

3. Update Main User
    method => Put
    req param => userID => User ID
    req body => {
        firsname => نام کاربر
        lastname => نام خانوادگی کاربر
        username => نام کاربری
        password => پسورد کاربر
        phone => شماره تماس کاربر
        city => محل زندگی کهربر - شهر
        email => ایمیل کاربر
        address => آدرس کاربر
        score =>‌امیتیاز کاربر در سایت
        buy => میزان خرید کاربر
    }

///////////////////// Finish Users Routes (sub_url => users/) //////////////////////



///////////////////// Start Orders Routes (sub_url => orders/) //////////////////////

1. Get all Orders
    method => Get
    res => all orders array

2. Delete Main Order
    method => Delete
    req param => orderID => Order ID

3. Update Main Order
    method => Put
    sub_url => /active-order
    req param => orderID => Order ID
    req param => isActive (0 OR 1) => Reject / Accept Order

///////////////////// Finish Orders Routes (sub_url => orders/) //////////////////////



///////////////////// Start Offs Routes (sub_url => offs/) //////////////////////

1. Get all Offs
    method => Get
    res => all offs array

2. Delete Main Off
    method => Delete
    req param => offID => Off ID

3. Accept / Reject Main Off Code
    method => Put
    sub_url => /active-off
    req param => offID => Off ID
    req param => isActive (0 OR 1) => Reject / Accept Off

///////////////////// Finish Offs Routes (sub_url => offs/) //////////////////////



///////////////////// Start Admins Routes (sub_url => admins/) //////////////////////

1. Get Main Admin Info
    method => Get
    req header => authorization => Admin Token

///////////////////// Finish Admins Routes (sub_url => admins/) //////////////////////


--------------------------------------------------------------
--------------------------------------------------------------UPDATED DOC --------------------------------------------------------------
--------------------------------------------------------------

API Documentation
Base URL: http://localhost:8000/api/
Authentication: 
برای مسیرهای ادمین (admins/): نیاز به هدر Authorization با توکن ادمین.

سایر مسیرها نیازی به احراز هویت ندارند، مگر اینکه در آینده مشخص شود.

Response Format: JSON
Error Handling:
400 Bad Request: درخواست نامعتبر (مثلاً پارامترهای نادرست).

401 Unauthorized: توکن ادمین نامعتبر یا غایب.

404 Not Found: منبع موردنظر (مثل محصول یا کاربر) یافت نشد.

500 Internal Server Error: خطای سرور.

1. Products Routes
Sub URL: /products/
1.1 Get All Products
Method: GET

URL: /products/

Description: دریافت لیست تمام محصولات.

Request Parameters: None

Request Body: None

Response:
Status: 200 OK

Body:
json

[
  {
    "id": 1,
    "title": "محصول نمونه",
    "price": 100000,
    "count": 50,
    "img": "http://example.com/images/product1.jpg",
    "popularity": 85,
    "sale": 120,
    "colors": 3
  },
  ...
]

Errors:
500: خطای سرور

1.2 Delete Main Product
Method: DELETE

URL: /products/{productID}

Description: حذف یک محصول با شناسه مشخص.

Request Parameters:
productID (path, required, integer): شناسه محصول

Request Body: None

Response:
Status: 204 No Content

Body: None

Errors:
404: محصول یافت نشد

500: خطای سرور

1.3 Update Main Product
Method: PUT

URL: /products/{productID}

Description: به‌روزرسانی اطلاعات یک محصول.

Request Parameters:
productID (path, required, integer): شناسه محصول

Request Body:
json

{
  "title": "عنوان جدید محصول",
  "price": 150000,
  "count": 30,
  "img": "http://example.com/images/new-product.jpg",
  "popularity": 90,
  "sale": 200,
  "colors": 5
}

Response:
Status: 200 OK

Body:
json

{
  "id": 1,
  "title": "عنوان جدید محصول",
  "price": 150000,
  "count": 30,
  "img": "http://example.com/images/new-product.jpg",
  "popularity": 90,
  "sale": 200,
  "colors": 5
}

Errors:
400: بدنه درخواست نامعتبر

404: محصول یافت نشد

500: خطای سرور

1.4 Add New Product
Method: POST

URL: /products/

Description: افزودن یک محصول جدید.

Request Parameters: None

Request Body:
json

{
  "title": "محصول جدید",
  "price": 200000,
  "count": 100,
  "img": "http://example.com/images/new-product.jpg",
  "popularity": 80,
  "sale": 0,
  "colors": 4
}

Response:
Status: 201 Created

Body:
json

{
  "id": 2,
  "title": "محصول جدید",
  "price": 200000,
  "count": 100,
  "img": "http://example.com/images/new-product.jpg",
  "popularity": 80,
  "sale": 0,
  "colors": 4
}

Errors:
400: بدنه درخواست نامعتبر

500: خطای سرور

2. Comments Routes
Sub URL: /comments/
2.1 Get All Comments
Method: GET

URL: /comments/

Description: دریافت لیست تمام نظرات.

Request Parameters: None

Request Body: None

Response:
Status: 200 OK

Body:
json

[
  {
    "id": 1,
    "body": "این محصول عالی است!",
    "user_id": 1,
    "product_id": 1,
    "status": "accepted"
  },
  ...
]

Errors:
500: خطای سرور

2.2 Delete Main Comment
Method: DELETE

URL: /comments/{commentId}

Description: حذف یک نظر با شناسه مشخص.

Request Parameters:
commentId (path, required, integer): شناسه نظر

Request Body: None

Response:
Status: 204 No Content

Body: None

Errors:
404: نظر یافت نشد

500: خطای سرور

2.3 Update Main Comment (Body)
Method: PUT

URL: /comments/{commentId}

Description: به‌روزرسانی محتوای یک نظر.

Request Parameters:
commentId (path, required, integer): شناسه نظر

Request Body:
json

{
  "body": "محتوای جدید نظر"
}

Response:
Status: 200 OK

Body:
json

{
  "id": 1,
  "body": "محتوای جدید نظر",
  "user_id": 1,
  "product_id": 1,
  "status": "accepted"
}

Errors:
400: بدنه درخواست نامعتبر

404: نظر یافت نشد

500: خطای سرور

2.4 Accept Comment
Method: POST

URL: /comments/accept

Description: تأیید یک نظر.

Request Parameters:
commentId (query, required, integer): شناسه نظر

Request Body: None

Response:
Status: 200 OK

Body:
json

{
  "id": 1,
  "status": "accepted"
}

Errors:
404: نظر یافت نشد

500: خطای سرور

2.5 Reject Comment
Method: POST

URL: /comments/reject

Description: رد یک نظر.

Request Parameters:
commentId (query, required, integer): شناسه نظر

Request Body: None

Response:
Status: 200 OK

Body:
json

{
  "id": 1,
  "status": "rejected"
}

Errors:
404: نظر یافت نشد

500: خطای سرور

3. Users Routes
3.1.1
باشد.

مسیر API برای ثبت نام
Method: POST

URL: http://localhost:8000/api/users/

Description: ثبت نام یک کاربر جدید با اطلاعات پایه.

Request Headers: None (احراز هویت لازم نیست)

Request Body:
json

{
  "email": "alireza@example.com",
  "phone": "09123456789",
  "username": "alireza123",
  "password": "password123"
}

Response:
Status: 201 Created

Body:
json

{
  "id": 24,
  "email": "alireza@example.com",
  "phone": "09123456789",
  "username": "alireza123",
  "firsname": null,
  "lastname": null,
  "city": null,
  "address": null,
  "score": 0,
  "buy": 0
}

Sub URL: /users/
3.1 Get All Users
Method: GET

URL: /users/

Description: دریافت لیست تمام کاربران با اطلاعات مرتبط (از جمله آدرس‌ها و جزئیات کارت‌ها).

Request Parameters: None

Request Body: None

Response:
Status: 200 OK

Body:
json

[
  {
    "id": 1,
    "firsname": "علیرضا",
    "lastname": "احمدی",
    "username": "alireza123",
    "password": "hashed_password",
    "phone": "09123456789",
    "city": "تهران",
    "email": "alireza@example.com",
    "address": "تهران - خیابان ولیعصر",
    "score": 100,
    "buy": 500000,
    "addresses": [
      {
        "id": 1,
        "address": "تهران - خیابان ولیعصر - کوچه اول",
        "city": "تهران",
        "postal_code": 1234567890,
        "address_type": "HOME"
      },
      ...
    ],
    "card_details": [
      {
        "id": 1,
        "card_number": "ENC_1234-5678-9012-3456",
        "cardholder_name": "علیرضا احمدی",
        "expiry_date": "12/2026",
        "card_type": "VISA"
      },
      ...
    ]
  },
  ...
]

Errors:
500: خطای سرور

3.2 Delete Main User
Method: DELETE

URL: /users/{userID}

Description: حذف یک کاربر با شناسه مشخص (آدرس‌ها و کارت‌های مرتبط به دلیل ON DELETE CASCADE خودکار حذف می‌شوند).

Request Parameters:
userID (path, required, integer): شناسه کاربر

Request Body: None

Response:
Status: 204 No Content

Body: None

Errors:
404: کاربر یافت نشد

500: خطای سرور

3.3 Update Main User
Method: PUT

URL: /users/{userID}

Description: به‌روزرسانی اطلاعات یک کاربر.

Request Parameters:
userID (path, required, integer): شناسه کاربر

Request Body:
json

{
  "firsname": "علی",
  "lastname": "محمدی",
  "username": "ali123",
  "password": "new_hashed_password",
  "phone": "09123456789",
  "city": "تهران",
  "email": "ali@example.com",
  "address": "تهران - خیابان انقلاب",
  "score": 150,
  "buy": 750000
}

Response:
Status: 200 OK

Body:
json

{
  "id": 1,
  "firsname": "علی",
  "lastname": "محمدی",
  "username": "ali123",
  "password": "new_hashed_password",
  "phone": "09123456789",
  "city": "تهران",
  "email": "ali@example.com",
  "address": "تهران - خیابان انقلاب",
  "score": 150,
  "buy": 750000
}

Errors:
400: بدنه درخواست نامعتبر

404: کاربر یافت نشد

500: خطای سرور

3.4 Add New Address (پیشنهادی)
Method: POST

URL: /users/{userID}/addresses

Description: افزودن آدرس جدید برای یک کاربر.

Request Parameters:
userID (path, required, integer): شناسه کاربر

Request Body:
json

{
  "address": "تهران - خیابان آزادی - کوچه جدید",
  "city": "تهران",
  "postal_code": 1234567899,
  "address_type": "HOME"
}

Response:
Status: 201 Created

Body:
json

{
  "id": 29,
  "user_id": 1,
  "address": "تهران - خیابان آزادی - کوچه جدید",
  "city": "تهران",
  "postal_code": 1234567899,
  "address_type": "HOME"
}

Errors:
400: بدنه درخواست نامعتبر

404: کاربر یافت نشد

500: خطای سرور

3.5 Add New Card (پیشنهادی)
Method: POST

URL: /users/{userID}/card-details

Description: افزودن جزئیات کارت جدید برای یک کاربر.

Request Parameters:
userID (path, required, integer): شناسه کاربر

Request Body:
json

{
  "card_number": "ENC_9876-5432-1098-7654",
  "cardholder_name": "علی محمدی",
  "expiry_date": "12/2027",
  "card_type": "VISA"
}

Response:
Status: 201 Created

Body:
json

{
  "id": 28,
  "user_id": 1,
  "card_number": "ENC_9876-5432-1098-7654",
  "cardholder_name": "علی محمدی",
  "expiry_date": "12/2027",
  "card_type": "VISA"
}

Errors:
400: بدنه درخواست نامعتبر

404: کاربر یافت نشد

500: خطای سرور

4. Orders Routes
Sub URL: /orders/
4.1 Get All Orders
Method: GET

URL: /orders/

Description: دریافت لیست تمام سفارشات.

Request Parameters: None

Request Body: None

Response:
Status: 200 OK

Body:
json

[
  {
    "id": 1,
    "user_id": 1,
    "product_id": 1,
    "quantity": 2,
    "total_price": 200000,
    "is_active": 1
  },
  ...
]

Errors:
500: خطای سرور

4.2 Delete Main Order
Method: DELETE

URL: /orders/{orderID}

Description: حذف یک سفارش با شناسه مشخص.

Request Parameters:
orderID (path, required, integer): شناسه سفارش

Request Body: None

Response:
Status: 204 No Content

Body: None

Errors:
404: سفارش یافت نشد

500: خطای سرور

4.3 Update Main Order
Method: PUT

URL: /orders/active-order

Description: به‌روزرسانی وضعیت سفارش (تأیید یا رد).

Request Parameters:
orderID (query, required, integer): شناسه سفارش

isActive (query, required, integer, 0 or 1): وضعیت سفارش (0: رد، 1: تأیید)

Request Body: None

Response:
Status: 200 OK

Body:
json

{
  "id": 1,
  "is_active": 1
}

Errors:
400: پارامترهای نامعتبر

404: سفارش یافت نشد

500: خطای سرور

5. Offs Routes
Sub URL: /offs/
5.1 Get All Offs
Method: GET

URL: /offs/

Description: دریافت لیست تمام کدهای تخفیف.

Request Parameters: None

Request Body: None

Response:
Status: 200 OK

Body:
json

[
  {
    "id": 1,
    "code": "OFF123",
    "discount": 20,
    "is_active": 1
  },
  ...
]

Errors:
500: خطای سرور

5.2 Delete Main Off
Method: DELETE

URL: /offs/{offID}

Description: حذف یک کد تخفیف با شناسه مشخص.

Request Parameters:
offID (path, required, integer): شناسه کد تخفیف

Request Body: None

Response:
Status: 204 No Content

Body: None

Errors:
404: کد تخفیف یافت نشد

500: خطای سرور

5.3 Accept / Reject Main Off Code
Method: PUT

URL: /offs/active-off

Description: به‌روزرسانی وضعیت کد تخفیف (تأیید یا رد).

Request Parameters:
offID (query, required, integer): شناسه کد تخفیف

isActive (query, required, integer, 0 or 1): وضعیت کد تخفیف (0: رد، 1: تأیید)

Request Body: None

Response:
Status: 200 OK

Body:
json

{
  "id": 1,
  "is_active": 1
}

Errors:
400: پارامترهای نامعتبر

404: کد تخفیف یافت نشد

500: خطای سرور

6. Admins Routes
Sub URL: /admins/
6.1 Get Main Admin Info
Method: GET

URL: /admins/

Description: دریافت اطلاعات ادمین.

Request Headers:
Authorization (required, string): توکن ادمین (مثال: Bearer <token>)

Request Parameters: None

Request Body: None

Response:
Status: 200 OK

Body:
json

{
  "id": 1,
  "username": "admin",
  "email": "admin@example.com",
  "role": "super_admin"
}

Errors:
401: توکن نامعتبر یا غایب

500: خطای سرور

